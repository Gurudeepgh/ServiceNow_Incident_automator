---
- name: Handle Datadog Alerts and Manage ServiceNow Cases
  hosts: localhost
  gather_facts: yes  # Required for ansible_date_time
  vars:
    datadog:
      api_key: "your_datadog_api_key"
      app_key: "your_datadog_app_key"
      api_url: "https://api.datadoghq.com/api/v1/alerts"

    service_now:
      instance: "your_instance.service-now.com"
      username: "your_username"
      password: "your_password"
      table: "incident"
      impact: "2"
      urgency: "2"

    recovery_window: 300  # 5 minutes

  tasks:

    - name: Fetch alerts from Datadog
      ansible.builtin.uri:
        url: "{{ datadog.api_url }}"
        method: GET
        headers:
          DD-API-KEY: "{{ datadog.api_key }}"
          DD-APPLICATION-KEY: "{{ datadog.app_key }}"
        return_content: yes
      register: datadog_alerts

    - name: Create ServiceNow case for each triggered alert
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.table }}"
        method: POST
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          impact: "{{ service_now.impact }}"
          urgency: "{{ service_now.urgency }}"
          short_description: "Datadog Alert - {{ item.name }}"
          description: "Alert triggered in Datadog. Severity: {{ item.severity }} at {{ ansible_date_time.iso8601 }}"
        status_code: 201
      loop: "{{ datadog_alerts.json.alerts }}"
      when: item.status == "triggered"
      register: created_cases

    - name: Wait for recovery window (5 minutes)
      ansible.builtin.pause:
        seconds: "{{ recovery_window }}"

    - name: Check if alert is recovered
      ansible.builtin.uri:
        url: "{{ datadog.api_url }}"
        method: GET
        headers:
          DD-API-KEY: "{{ datadog.api_key }}"
          DD-APPLICATION-KEY: "{{ datadog.app_key }}"
        return_content: yes
      register: updated_alerts

    - name: Auto-resolve ServiceNow case if alert is recovered
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.table }}"
        method: PATCH
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          state: "resolved"
          short_description: "Datadog Alert - {{ item.name }} (Resolved)"
          description: "The alert has recovered within the recovery window."
        status_code: 200
      loop: "{{ updated_alerts.json.alerts }}"
      when: item.status == "resolved"

    - name: Convert case into an incident if alert is still active
      ansible.builtin.uri:
        url: "https://{{ service_now.instance }}/api/now/table/{{ service_now.table }}"
        method: PATCH
        user: "{{ service_now.username }}"
        password: "{{ service_now.password }}"
        force_basic_auth: yes
        headers:
          Content-Type: "application/json"
        body_format: json
        body:
          state: "in_progress"
          short_description: "Datadog Alert - {{ item.name }} (Incident Created)"
          description: "The alert is still active after the recovery window. Escalating to an incident."
        status_code: 200
      loop: "{{ updated_alerts.json.alerts }}"
      when: item.status == "triggered"
